package com.sunbase.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.sunbase.DTO.UpdateCustomerDTO;
import com.sunbase.exception.LoginException;
import com.sunbase.exception.UserException;
import com.sunbase.model.Admin;
import com.sunbase.model.Authority;
import com.sunbase.model.Customer;
import com.sunbase.model.Role;
import com.sunbase.repository.AdminRepo;
import com.sunbase.repository.CustomerRepo;

import jakarta.annotation.PostConstruct;
@Service
public class UserServiceImpl implements AdminService{
	
	@Autowired
	private AdminRepo AdminRepo;
	
	@Autowired
	private CustomerRepo customerRepo;
	
	@Autowired
	private PasswordEncoder encoder;
	
	@PostConstruct
	public void init() {
		String defaultAdminEmail = "Admin@mail.com";
        String defaultAdminPassword = "admin123";
        Optional<Admin> opt= AdminRepo.findByEmail(defaultAdminEmail);
        if(opt.isEmpty()) {
			Admin admin=new Admin();
			admin.setName("Admin");
			admin.setEmail(defaultAdminEmail);
			admin.setPassword(encoder.encode(defaultAdminPassword));
			List<Authority> auths= new ArrayList<>();
			auths.add(new Authority(null,Role.ROLE_ADMIN,admin));
			admin.setAuthorities(auths);
			AdminRepo.save(admin);
        }
		
	}


	@Override
	public Admin addUser(Customer user) {
		//
		user.setPassword(encoder.encode(user.getPassword()));
		List<Authority> authorities=new ArrayList<>();
		Authority at=new Authority();
		at.setRole(Role.ROLE_USER);;
		at.setUser(user);
		authorities.add(at);
		user.setAuthorities(authorities);
		Customer newUser=userRepo.save(user);
		return newUser;
	}

	@Override
	public String updateUser(UpdateCustomerDTO updateUserDTO) throws LoginException {

			//Here we get my user
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		Customer user = userRepo.findByEmail(authentication.getName())
				.orElseThrow(() -> new LoginException("Please Login First"));
		
		//updated its field
		if(updateUserDTO.getDob()!=null) {
			user.setDob(updateUserDTO.getDob());
		}
		if(updateUserDTO.getEmail()!=null) {
			user.setEmail(updateUserDTO.getEmail());
		}
		if(updateUserDTO.getName()!=null) {
			user.setName(updateUserDTO.getName());
		}
		//Here update only if password is there
		if(updateUserDTO.getPassword()!=null) {
			user.setPassword(encoder.encode(updateUserDTO.getPassword()));
		}
		if(updateUserDTO.getPhone()!=null) {
			user.setPhone(updateUserDTO.getPhone());
		}
		
		if(updateUserDTO.getAddress()!=null) {
			user.setAddress(updateUserDTO.getAddress());
		}
		
		if(updateUserDTO.getPhoto()!=null) {
			user.setPhoto(updateUserDTO.getPhoto());
		}
		//Saved updated user
		userRepo.save(user);
		return "user updated successfully";
	}


	@Override
	public List<Customer> getAllAdmin() {
		// Here we use findBy... Syntex
		
		List<Authority> list= authorityRepo.findAll().stream()
				.filter(s->s.getRole().toString().equals("ROLE_ADMIN")).toList();
		return list.stream().map(s->s.getUser()).toList();
		
	}


	@Override
	public Customer addAdmin(Admin admin) {
		
		Customer user= new Customer();
		user.setPassword(encoder.encode(admin.getPassword()));
		user.setDob(admin.getDob());
		user.setEmail(admin.getEmail());
		user.setName(admin.getName());
		user.setPhoto(admin.getPhoto());
		user.setPhone(admin.getPhone());
		user.setAddress(admin.getAddress());
		List<Authority> authorities=new ArrayList<>();
		authorities.add(new Authority(null,Role.ROLE_ADMIN, user));
		user.setAuthorities(authorities);
		Customer savedAdmin=userRepo.save(user);
		
		return savedAdmin;
	}

	@Override
	public Customer getOwnProfile() {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		Customer user = userRepo.findByEmail(authentication.getName())
				.orElseThrow(() -> new LoginException("Please Login First"));
		return user;
	}

	@Override
	public String removeUser(Integer id) {

		Customer user=userRepo.findById(id)
				.orElseThrow(()-> new UserException("Inviled user id."));
		userRepo.delete(user);
		return "Deleted";
	}

}
