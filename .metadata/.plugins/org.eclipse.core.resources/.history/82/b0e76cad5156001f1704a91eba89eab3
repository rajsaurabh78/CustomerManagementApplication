package com.sunbase.config;

import java.io.IOException;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.crypto.SecretKey;

import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.OncePerRequestFilter;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;


public class JwtTokenGeneratorFilter extends OncePerRequestFilter {

	Logger logger = LoggerFactory.getLogger(JwtTokenGeneratorFilter.class);

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
	        throws ServletException, IOException {
	    
	    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
	    if (authentication != null && authentication.isAuthenticated() && !(authentication instanceof AnonymousAuthenticationToken)) {
	        SecretKey key = Keys.hmacShaKeyFor(SecurityConstants.JWT_KEY.getBytes());   
	        String jwt = Jwts.builder()
	                .setIssuer("Sunbase")
	                .setSubject("JWT Token")
	                .claim("username", authentication.getName())
	                .claim("authorities", populateAuthorities(authentication.getAuthorities()))
	                .setIssuedAt(new Date())
	                .setExpiration(new Date(new Date().getTime() + 30000000)) // 8 hours
	                .signWith(key).compact();
	        
	        response.setHeader(SecurityConstants.JWT_HEADER, "Bearer " + jwt);
	        logger.debug("JWT Token added to response header: {}", jwt);
	    }

	    filterChain.doFilter(request, response);
	}
	
    private String populateAuthorities(Collection<? extends GrantedAuthority> collection) {
        
    	Set<String> authoritiesSet = new HashSet<>();
        
        for (GrantedAuthority authority : collection) {
            authoritiesSet.add(authority.getAuthority());
        }
        return String.join(",", authoritiesSet);
   
    
    }
			

	@Override
	protected boolean shouldNotFilter(HttpServletRequest request) throws ServletException {
	
        return !request.getServletPath().equals("/signIn");	
	}
	

}

